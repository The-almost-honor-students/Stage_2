# JMH version: 1.37
# VM version: JDK 17.0.16, OpenJDK 64-Bit Server VM, 17.0.16+8-LTS
# VM invoker: /Users/giselabelmontecruz/Library/Java/JavaVirtualMachines/ms-17.0.16/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=50839:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.tahs.benchmark.IndexingBenchmarks.throughputIndexing_roundRobin
# Parameters: (bookId = 1342, datalakeDir = datalake)

# Run progress: 0,00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 99,472 ops/s
# Warmup Iteration   2: 113,016 ops/s
# Warmup Iteration   3: 113,958 ops/s
# Warmup Iteration   4: 107,039 ops/s
# Warmup Iteration   5: 106,746 ops/s
Iteration   1: 124,319 ops/s
Iteration   2: 125,576 ops/s
Iteration   3: 116,655 ops/s
Iteration   4: 95,628 ops/s
Iteration   5: 132,609 ops/s
Iteration   6: 112,327 ops/s
Iteration   7: 113,792 ops/s
Iteration   8: 117,338 ops/s
Iteration   9: 108,165 ops/s
Iteration  10: 119,736 ops/s


Result "com.tahs.benchmark.IndexingBenchmarks.throughputIndexing_roundRobin":
  116,615 ±(99.9%) 15,483 ops/s [Average]
  (min, avg, max) = (95,628, 116,615, 132,609), stdev = 10,241
  CI (99.9%): [101,131, 132,098] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.16, OpenJDK 64-Bit Server VM, 17.0.16+8-LTS
# VM invoker: /Users/giselabelmontecruz/Library/Java/JavaVirtualMachines/ms-17.0.16/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=50839:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tahs.benchmark.IndexingBenchmarks.indexLatency_perBook
# Parameters: (bookId = 1342, datalakeDir = datalake)

# Run progress: 50,00% complete, ETA 00:02:32
# Fork: 1 of 1
# Warmup Iteration   1: 0,319 ±(99.9%) 0,038 s/op
# Warmup Iteration   2: 0,287 ±(99.9%) 0,002 s/op
# Warmup Iteration   3: 0,292 ±(99.9%) 0,003 s/op
# Warmup Iteration   4: 0,306 ±(99.9%) 0,008 s/op
# Warmup Iteration   5: 0,307 ±(99.9%) 0,007 s/op
Iteration   1: 0,307 ±(99.9%) 0,005 s/op
Iteration   2: 0,316 ±(99.9%) 0,002 s/op
Iteration   3: 0,309 ±(99.9%) 0,010 s/op
Iteration   4: 0,307 ±(99.9%) 0,008 s/op
Iteration   5: 0,305 ±(99.9%) 0,009 s/op
Iteration   6: 0,308 ±(99.9%) 0,001 s/op
Iteration   7: 0,307 ±(99.9%) 0,001 s/op
Iteration   8: 0,307 ±(99.9%) 0,005 s/op
Iteration   9: 0,307 ±(99.9%) 0,010 s/op
Iteration  10: 0,305 ±(99.9%) 0,011 s/op


Result "com.tahs.benchmark.IndexingBenchmarks.indexLatency_perBook":
  0,308 ±(99.9%) 0,005 s/op [Average]
  (min, avg, max) = (0,305, 0,308, 0,316), stdev = 0,003
  CI (99.9%): [0,303, 0,312] (assumes normal distribution)


# Run complete. Total time: 00:05:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                         (bookId)  (datalakeDir)   Mode  Cnt    Score    Error  Units
IndexingBenchmarks.throughputIndexing_roundRobin      1342       datalake  thrpt   10  116,615 ± 15,483  ops/s
IndexingBenchmarks.indexLatency_perBook               1342       datalake   avgt   10    0,308 ±  0,005   s/op

Benchmark result is saved to benchmarking_results/indexing/data/jmh_t4.csv
